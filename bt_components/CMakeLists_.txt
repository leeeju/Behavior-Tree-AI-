cmake_minimum_required(VERSION 3.5)
project(bt_components CXX)

#find_package(ament_cmake REQUIRED)
#find_package(rclcpp REQUIRED)
#find_package(rclcpp_action REQUIRED)
#find_package(std_msgs REQUIRED)
#find_package(bt_msgs REQUIRED)
#find_package(behaviortree_cpp_v3 REQUIRED)
#
#include_directories(include /usr/local/include/behaviortree_cpp_v3/ /usr/local/include/ /opt/ros/foxy/include/)
#
#set(library_name ${PROJECT_NAME})
#
#set(dependencies
#        rclcpp
#        rclcpp_action
#        behaviortree_cpp_v3
#        std_msgs
#        )
#
##add_library(${library_name} SHARED
##  src/behavior_tree_engine.cpp
##)
#
#ament_target_dependencies(${library_name}
#        ${dependencies}
#        )

find_package(ament_cmake REQUIRED)
find_package(nav2_common REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_action REQUIRED)
find_package(rclcpp_lifecycle REQUIRED)
find_package(builtin_interfaces REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(nav2_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(bt_msgs REQUIRED)
find_package(behaviortree_cpp_v3 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(std_msgs REQUIRED)
find_package(std_srvs REQUIRED)
find_package(nav2_util REQUIRED)

nav2_package()

include_directories(
        include
)

set(library_name ${PROJECT_NAME})

set(dependencies
        rclcpp
        rclcpp_action
        rclcpp_lifecycle
        geometry_msgs
        sensor_msgs
        nav2_msgs
        nav_msgs
        bt_msgs
        behaviortree_cpp_v3
        tf2
        tf2_ros
        tf2_geometry_msgs
        std_msgs
        std_srvs
        nav2_util
        )

add_library(${library_name} SHARED
        src/behavior_tree_engine.cpp
        )

ament_target_dependencies(${library_name}
        ${dependencies}
        )

add_library(bt_navigation_caller SHARED src/navigation_caller/bt_navigation_caller.cpp)
list(APPEND bt_components_libs bt_navigation_caller)

foreach (bt_plugin ${bt_components_libs})
    ament_target_dependencies(${bt_plugin} ${dependencies})
    target_compile_definitions(${bt_plugin} PRIVATE BT_PLUGIN_EXPORT)
endforeach ()

install(TARGETS ${library_name}
        ${bt_components_libs}
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin
        )

install(DIRECTORY include/
        DESTINATION include/
        )

install(FILES bt_tree_nodes_instructions.xml DESTINATION share/${PROJECT_NAME})

#if(BUILD_TESTING)
#  find_package(ament_lint_auto REQUIRED)
#  ament_lint_auto_find_test_dependencies()
#  find_package(ament_cmake_gtest REQUIRED)
#  add_subdirectory(test)
#endif()

ament_export_include_directories(
        include
)

ament_export_libraries(
        ${library_name}
        ${bt_components_libs}
)

ament_export_dependencies(${dependencies})

ament_package()
